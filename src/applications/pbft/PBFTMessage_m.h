//
// Generated file, do not edit! Created by opp_msgc 4.2 from applications/pbft/PBFTMessage.msg.
//

#ifndef _PBFTMESSAGE_M_H_
#define _PBFTMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <TransportAddress.h>
#include <OverlayKey.h>
#include <Operation.h>
// }}



/**
 * Enum generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum MessageType {
 *     REQUEST = 1;
 * 	PREPREPARE = 2;
 * 	PREPARE = 3;
 * 	COMMIT = 4;
 * 	REPLY = 5;
 * }
 * </pre>
 */
enum MessageType {
    REQUEST = 1,
    PREPREPARE = 2,
    PREPARE = 3,
    COMMIT = 4,
    REPLY = 5
};

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTMessage {
 *     int type enum (MessageType);     
 *     TransportAddress senderAddress;  
 *     OverlayKey oKey;				 
 *     
 *     Operation op;
 * }
 * </pre>
 */
class PBFTMessage : public ::cPacket
{
  protected:
    int type_var;
    TransportAddress senderAddress_var;
    OverlayKey oKey_var;
    Operation op_var;

  private:
    void copy(const PBFTMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTMessage&);

  public:
    PBFTMessage(const char *name=NULL, int kind=0);
    PBFTMessage(const PBFTMessage& other);
    virtual ~PBFTMessage();
    PBFTMessage& operator=(const PBFTMessage& other);
    virtual PBFTMessage *dup() const {return new PBFTMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual TransportAddress& getSenderAddress();
    virtual const TransportAddress& getSenderAddress() const {return const_cast<PBFTMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const TransportAddress& senderAddress);
    virtual OverlayKey& getOKey();
    virtual const OverlayKey& getOKey() const {return const_cast<PBFTMessage*>(this)->getOKey();}
    virtual void setOKey(const OverlayKey& oKey);
    virtual Operation& getOp();
    virtual const Operation& getOp() const {return const_cast<PBFTMessage*>(this)->getOp();}
    virtual void setOp(const Operation& op);
};

inline void doPacking(cCommBuffer *b, PBFTMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTRequestMessage extends PBFTMessage {
 * 	type = REQUEST;
 * }
 * </pre>
 */
class PBFTRequestMessage : public ::PBFTMessage
{
  protected:

  private:
    void copy(const PBFTRequestMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTRequestMessage&);

  public:
    PBFTRequestMessage(const char *name=NULL, int kind=0);
    PBFTRequestMessage(const PBFTRequestMessage& other);
    virtual ~PBFTRequestMessage();
    PBFTRequestMessage& operator=(const PBFTRequestMessage& other);
    virtual PBFTRequestMessage *dup() const {return new PBFTRequestMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PBFTRequestMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTRequestMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTPreprepareMessage extends PBFTMessage {
 * 	type = PREPREPARE;
 * }
 * </pre>
 */
class PBFTPreprepareMessage : public ::PBFTMessage
{
  protected:

  private:
    void copy(const PBFTPreprepareMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTPreprepareMessage&);

  public:
    PBFTPreprepareMessage(const char *name=NULL, int kind=0);
    PBFTPreprepareMessage(const PBFTPreprepareMessage& other);
    virtual ~PBFTPreprepareMessage();
    PBFTPreprepareMessage& operator=(const PBFTPreprepareMessage& other);
    virtual PBFTPreprepareMessage *dup() const {return new PBFTPreprepareMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PBFTPreprepareMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTPreprepareMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTPrepareMessage extends PBFTMessage {
 * 	type = PREPARE;
 * }
 * </pre>
 */
class PBFTPrepareMessage : public ::PBFTMessage
{
  protected:

  private:
    void copy(const PBFTPrepareMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTPrepareMessage&);

  public:
    PBFTPrepareMessage(const char *name=NULL, int kind=0);
    PBFTPrepareMessage(const PBFTPrepareMessage& other);
    virtual ~PBFTPrepareMessage();
    PBFTPrepareMessage& operator=(const PBFTPrepareMessage& other);
    virtual PBFTPrepareMessage *dup() const {return new PBFTPrepareMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PBFTPrepareMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTPrepareMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTCommitMessage extends PBFTMessage {
 * 	type = COMMIT;
 * }
 * </pre>
 */
class PBFTCommitMessage : public ::PBFTMessage
{
  protected:

  private:
    void copy(const PBFTCommitMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTCommitMessage&);

  public:
    PBFTCommitMessage(const char *name=NULL, int kind=0);
    PBFTCommitMessage(const PBFTCommitMessage& other);
    virtual ~PBFTCommitMessage();
    PBFTCommitMessage& operator=(const PBFTCommitMessage& other);
    virtual PBFTCommitMessage *dup() const {return new PBFTCommitMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PBFTCommitMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTCommitMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/pbft/PBFTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet PBFTReplyMessage extends PBFTMessage {
 * 	type = REPLY;
 * }
 * </pre>
 */
class PBFTReplyMessage : public ::PBFTMessage
{
  protected:

  private:
    void copy(const PBFTReplyMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PBFTReplyMessage&);

  public:
    PBFTReplyMessage(const char *name=NULL, int kind=0);
    PBFTReplyMessage(const PBFTReplyMessage& other);
    virtual ~PBFTReplyMessage();
    PBFTReplyMessage& operator=(const PBFTReplyMessage& other);
    virtual PBFTReplyMessage *dup() const {return new PBFTReplyMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, PBFTReplyMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PBFTReplyMessage& obj) {obj.parsimUnpack(b);}


#endif // _PBFTMESSAGE_M_H_
